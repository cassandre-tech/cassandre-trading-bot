import{_ as t,o,c,b as a,a as i,e as n,d as s,r as p}from"./app.445d5f28.js";const r={},l=n(`<h1 id="dry-mode-backtesting" tabindex="-1"><a class="header-anchor" href="#dry-mode-backtesting" aria-hidden="true">#</a> Dry mode &amp; backtesting</h1><h2 id="dry-mode" tabindex="-1"><a class="header-anchor" href="#dry-mode" aria-hidden="true">#</a> Dry mode</h2><p>Cassandre propose un mode dry qui permet de simuler un exchange virtuel et ses r\xE9ponses. Vous pouvez l&#39;activer en mettant le param\xE8tre <code>cassandre.trading.bot.exchange.modes.dry</code> \xE0 <code>true</code> dans le fichier <code>src/test/resources/application.properties</code>.</p><p>Cassandre va alors \xE9muler un exchange virtuel qui r\xE9pondra \xE0 vos ordres et mettra \xE0 jour votre compte virtuel (o\xF9 se trouvent vos assets virtuels). De cette fa\xE7on, vous allez pouvoir tester votre strategy et voir les gains virtuels r\xE9alis\xE9s.</p><p>La premi\xE8re \xE9tape est de configurer vos actifs. Cassandre va charger tous les fichiers commen\xE7ant par <code>user-</code> et finissant par <code>.tsv</code> ou <code>.csv</code> dans <code>src/test/resources</code>.</p><p>Dans ces fichiers, pour chaque compte, vous allez configurer la balance de chaque crypto monnaie, par exemple, voici le fichier <code>user-trade.csv</code> :</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BTC,0.99962937
USDT,1000
ETH,10 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lorsque vous d\xE9marrerez Cassandre, vous devriez voir :</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>22:53:38 - Adding account &#39;trade&#39;
22:53:38 - - Adding balance 0.99962937 BTC
22:53:38 - - Adding balance 1000 USDT
22:53:38 - - Adding balance 10 ETH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vous pouvez d\xE9sormais cr\xE9er des ordres et des positions, vos actifs sur vos comptes virtuels seront mis \xE0 jour.</p><h2 id="backtesting" tabindex="-1"><a class="header-anchor" href="#backtesting" aria-hidden="true">#</a> Backtesting</h2><p>Pour faire simple, &quot;backtester&quot; une strat\xE9gie est le process qui consiste \xE0 tester votre strat\xE9gie sur une p\xE9riode de temps pr\xE9c\xE9dente. Cassandre va vous permettre de simuler la r\xE9action de vos strat\xE9gies \xE0 ces donn\xE9es.</p>`,12),d=s("Le premier pas consiste \xE0 ajouter "),u={href:"https://search.maven.org/search?q=a:cassandre-trading-bot-spring-boot-starter-test",target:"_blank",rel:"noopener noreferrer"},v=s("cassandre-trading-bot-spring-boot-starter-test"),k=s(" \xE0 votre projet."),g=n(`<p>Editez votre fichier <code>pom.xml</code> et ajoutez cette d\xE9pendance :</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tech.cassandre.trading.bot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cassandre-trading-bot-spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Maintenant, nous devons ajouter les donn\xE9es que nous voulons utiliser lors de notre test JUnit. Ceci peut se faire avec la commande :</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">SYMBOL</span><span class="token operator">=</span>BTC-USDT
<span class="token assign-left variable">START_DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> --date<span class="token operator">=</span><span class="token string">&quot;3 months ago&quot;</span> +<span class="token string">&quot;%s&quot;</span><span class="token variable">\`</span></span>
<span class="token assign-left variable">END_DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +<span class="token string">&quot;%s&quot;</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;&quot;TIMESTAMP&quot;, &quot;OPEN&quot;, &quot;CLOSE&quot;, &quot;HIGH&quot;, &quot;LOW&quot;, &quot;VOLUME&quot;, &quot;QUOTE_VOLUME&quot;, &quot;CURRENCY_PAIR&quot;&#39;</span> <span class="token operator">&gt;</span> src/test/resources/candles-for-backtesting-btc-usdt.csv
<span class="token function">curl</span> -s <span class="token string">&quot;https://api.kucoin.com/api/v1/market/candles?type=15min&amp;symbol=<span class="token variable">\${SYMBOL}</span>&amp;startAt=<span class="token variable">\${START_DATE}</span>&amp;endAt=<span class="token variable">\${END_DATE}</span>&quot;</span> <span class="token punctuation">\\</span>
<span class="token operator">|</span> jq --arg SYMBOL <span class="token string">&quot;<span class="token variable">$SYMBOL</span>&quot;</span> -r -c <span class="token string">&#39;.data[] | . + [$SYMBOL] | @csv&#39;</span> <span class="token punctuation">\\</span>
<span class="token operator">|</span> <span class="token function">tac</span> <span class="token variable">$1</span> <span class="token operator">&gt;&gt;</span> src/test/resources/candles-for-backtesting-btc-usdt.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ceci va cr\xE9er un fichier nomm\xE9 <code>candles-for-backtesting-btc-usdt.csv</code> avec les donn\xE9es historiques qui sera import\xE9 par votre test si vous avez l&#39;annotation suivante :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">TickerFluxMock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>D\xE9sormais, durant vos tests, au lieu de recevoir des tickers depuis l&#39;exchange, vous receverez des tickers import\xE9 depuis les fichiers csv se trouvant dans <code>src/test/resources</code>.</p>`,7);function m(b,h){const e=p("ExternalLinkIcon");return o(),c("div",null,[l,a("p",null,[d,a("a",u,[v,i(e)]),k]),g])}var q=t(r,[["render",m],["__file","dry-mode-and-backtesting.html.vue"]]);export{q as default};
